#include <stdio.h>
#include <stdlib.h>  


struct Item {
    int value;
    int weight;
};


int compare(const void *a, const void *b) {
    double ratioA = ((struct Item *)a)->value / (double)((struct Item *)a)->weight;
    double ratioB = ((struct Item *)b)->value / (double)((struct Item *)b)->weight;
    return (ratioB > ratioA) - (ratioB < ratioA);
}


void knapsackGreedy(struct Item items[], int n, int capacity) {
    
    qsort(items, n, sizeof(items[0]), compare);

    int currentWeight = 0; 
    double finalValue = 0.0; 

    
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            finalValue += items[i].value;
        } else {
            int remainingWeight = capacity - currentWeight;
            finalValue += items[i].value * ((double)remainingWeight / items[i].weight);
            break; 
        }
    }

    printf("Maximum value that can be obtained: %.2lf\n", finalValue);
}

int main() {
    struct Item items[] = {{60, 10}, {100, 20}, {120, 30}};
    int n = sizeof(items) / sizeof(items[0]);
    int capacity = 50; 

    knapsackGreedy(items, n, capacity);

    return 0;
}
