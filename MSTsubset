#include <stdio.h>
#include <stdlib.h>


struct Edge {
    int src, dest, weight;
};


struct Subset {
    int parent;
    int rank;
};


struct Graph {
    int V, E;
    struct Edge *edges;
};


struct Graph *createGraph(int V, int E) {
    struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->E = E;
    graph->edges = (struct Edge *)malloc(E * sizeof(struct Edge));
    return graph;
}


int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}


void Union(struct Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}


int compareEdges(const void *a, const void *b) {
    return ((struct Edge *)a)->weight - ((struct Edge *)b)->weight;
}


void KruskalMST(struct Graph *graph) {
    int V = graph->V;
    struct Edge resultMST[V]; 
    int e = 0; 
    int i = 0; 

    
    qsort(graph->edges, graph->E, sizeof(graph->edges[0]), compareEdges);

    
    struct Subset *subsets = (struct Subset *)malloc(V * sizeof(struct Subset));

    
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    
    while (e < V - 1 && i < graph->E) {
        struct Edge nextEdge = graph->edges[i++];

        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        
        if (x != y) {
            resultMST[e++] = nextEdge;
            Union(subsets, x, y);
        }
    }

    printf("Edges in the Minimum Spanning Tree:\n");
    for (i = 0; i < e; i++) {
        printf("(%d, %d) -> %d\n", resultMST[i].src, resultMST[i].dest, resultMST[i].weight);
    }

    free(subsets);
}

int main() {
    int V = 4; 
    int E = 5; 
    struct Graph *graph = createGraph(V, E);

    
    graph->edges[0].src = 0;
    graph->edges[0].dest = 1;
    graph->edges[0].weight = 10;

    
    graph->edges[1].src = 0;
    graph->edges[1].dest = 2;
    graph->edges[1].weight = 6;

    
    graph->edges[2].src = 0;
    graph->edges[2].dest = 3;
    graph->edges[2].weight = 5;

    
    graph->edges[3].src = 1;
    graph->edges[3].dest = 3;
    graph->edges[3].weight = 15;

    
    graph->edges[4].src = 2;
    graph->edges[4].dest = 3;
    graph->edges[4].weight = 4;

    KruskalMST(graph);

    free(graph->edges);
    free(graph);

    return 0;
}
